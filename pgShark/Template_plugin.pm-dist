##
# This program is open source, licensed under the simplified BSD license.  For license terms, see the LICENSE file.
##
package Xxx;

use strict;
use warnings;
use pgShark::Utils;
use Net::Pcap qw(:functions);

## TODO
#  * ...

sub new {
	my $class = shift;
	my $args = shift;
	my $pcap = shift;

	my $self = {
	};

	# set the pcap filter to remove unneeded backend answer
	my $filter = undef;

	# the following filter reject TCP-only stuff and capture only frontend messages
	pcap_compile($pcap, \$filter,
		"((((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)", 0, 0
	);
	pcap_setfilter($pcap, $filter);

	debug(1, "Xxx: Plugin loaded.\n");

	return bless($self, $class);
}

## handle command B(1) (Parse Complete)
# @param $pg_msg hash with pg message properties
sub process_parse_complete {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(2) (Bind Complete)
# @param $pg_msg hash with pg message properties
sub process_bind_complete {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(A) (notification response)
# @param $pg_msg hash with pg message properties
sub process_notif_response {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(B) (bind)
# @param $pg_msg hash with pg message properties
sub process_bind {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(C) (command complete)
# @param $pg_msg hash with pg message properties
sub process_command_complete {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(C) (close)
# @param $pg_msg hash with pg message properties
sub process_close {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(D) (data row)
# @param $pg_msg hash with pg message properties
sub process_data_row {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(D) (Describe)
# @param $pg_msg hash with pg message properties
sub process_describe {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(E) (error response)
# @param $pg_msg hash with pg message properties
sub process_error_response {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(E) (execute)
# @param $pg_msg hash with pg message properties
sub process_execute {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(I) (empty query response)
# @param $pg_msg hash with pg message properties
sub process_empty_query {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(K) (BackendKeyData)
# @param $pg_msg hash with pg message properties
sub process_key_data {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(N) (notice response)
# @param $pg_msg hash with pg message properties
sub process_notice_response {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(n) (no data)
# @param $pg_msg hash with pg message properties
sub process_no_data {
	my $self = shift;
	my $pg_msg = shift;
}

## handle F(P) command (parse)
# @param $pg_msg hash with pg message properties
sub process_parse {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(Q) (query)
# @param $pg_msg hash with pg message properties
sub process_query {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(R) (authentification request)
# @param $pg_msg hash with pg message properties
sub process_auth_request {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(s) (portal suspended)
# @param $pg_msg hash with pg message properties
sub process_portal_suspended {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(S) (sync)
# @param $pg_msg hash with pg message properties
sub process_sync {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(T) (row description)
# @param $pg_msg hash with pg message properties
sub process_row_desc {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(t) (parameter description)
# @param $pg_msg hash with pg message properties
sub process_param_desc {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command F(X) (terminate)
# @param $pg_msg hash with pg message properties
sub process_disconnect {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command B(Z) (ready for query)
# @param $pg_msg hash with pg message properties
sub process_ready {
	my $self = shift;
	my $pg_msg = shift;
}

### specials messages without 1-byte type

## handle command CancelRequest (F)
# @param $pg_msg hash with pg message properties
sub process_cancel_request {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command SSLRequest (F)
# @param $pg_msg hash with pg message properties
sub process_ssl_request {
	my $self = shift;
	my $pg_msg = shift;
}

## handle command StartupMessage (F)
# @param $pg_msg hash with pg message properties
sub process_startup_message {
	my $self = shift;
	my $pg_msg = shift;
}

## this one doesn't exists as a backend answer
# but pgshark call this method when backend answers to SSLRequest
sub process_ssl_answer {
	my $self = shift;
	my $pg_msg = shift;
}

sub DESTROY {
	my $self = shift;
#	debug(1, "Xxx: output something usefull here ?\n");
}

1;
